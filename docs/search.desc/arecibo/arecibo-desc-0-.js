searchState.loadedDescShard("arecibo", 0, "This library implements Nova, a high-speed recursive SNARK.\nA SNARK that proves the knowledge of a valid <code>RecursiveSNARK</code>\nA type that holds the prover key for <code>CompressedSNARK</code>\nA type that holds public parameters of Nova\nA type that holds parameters for the primary and secondary …\nA SNARK that proves the correct execution of an …\nA resource buffer for <code>RecursiveSNARK</code> for storing scratch …\nA type that holds the verifier key for <code>CompressedSNARK</code>\nCompute the circuit digest of a <code>StepCircuit</code>.\nGlobal Nova constants\nThis module defines CycleFold folding scheme and its …\nReturn the <code>R1CSWithArity</code>’ digest.\nRetrieve the digest of the public parameters.\nThis module defines errors returned by the library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis module implements various gadgets necessary for Nova …\nThis implementation behaves in ways specific to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>R1CSWithArity</code>\nCreate new instance of recursive SNARK\nReturns the number of constraints in the primary and …\nThe number of steps which have been executed thus far.\nReturns the number of variables in the primary and …\nGet the outputs after the last step of computation.\nCreate a new <code>CompressedSNARK</code>\nCreate a new <code>RecursiveSNARK</code> (or updates the provided …\nThis module implements Nova’s traits using the following …\nThis module defines R1CS related types and a folding …\nSet up builder to create <code>PublicParams</code> for a pair of …\nCreates prover and verifier keys for <code>CompressedSNARK</code>\nThis module implements <code>RelaxedR1CSSNARKTrait</code> using Spartan …\nSuperNova Description\nThis module defines various traits required by the users …\nVerify the correctness of the <code>RecursiveSNARK</code>\nVerify the correctness of the <code>CompressedSNARK</code>\nInputs of the primary circuits\nOutputs of the primary circuits\nMacros to give syntactic sugar for zipWith pattern and …\nLike <code>zip_with</code> but use <code>for_each</code> instead of <code>map</code>.\nBit size of Nova field element hashes\nThis module defines the needed wrong-field NIFS prover\nThis module defines the Cyclefold <code>RecursiveSNARK</code> type with …\nA SNARK that holds the proof of a step of an incremental …\nA SNARK that holds the proof of a step of an incremental …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes a relaxed R1CS instance-witness pair (U1, W1) and an …\nFolds an R1CS instance/witness pair (U2, W2) into a …\nThe public parameters used in the CycleFold recursive …\nA SNARK that proves the correct execution of an …\nCalculate the digest of the public parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of a recursive SNARK\nReturns the number of constraints in the primary and …\nReturns the number of variables in the primary and …\nUpdate the <code>RecursiveSNARK</code> by proving a step of the …\nBuilds the public parameters for the circuit <code>C1</code>. The same …\nVerify the correctness of the <code>RecursiveSNARK</code>\nreturned when the supplied compressed commitment cannot be …\nreturned when there is an error creating a digest\nreturned when the consistency with public IO and …\nreturned when the prover cannot prove the provided …\nreturned when the transcript engine encounters an overflow …\nreturned if the provided commitment key is not of …\nreturned if the supplied row or col in (row,col,val) tuple …\nreturned when the initial input to an incremental …\nreturned if the supplied input is not of the right length\nreturned when the multiset check fails\nreturned if the provided number of steps is zero\nreturned when an invalid PCS evaluation argument is …\nreturned when the product proof check fails\nreturned if the step circuit calls inputize or alloc_io in …\nreturned when the step execution produces an output whose …\nreturned when an invalid sum-check proof is provided\nreturned if the supplied witness is not of the right length\nreturned when a length check fails in a PCS\nErrors returned by Nova\nErrors specific to the Polynomial commitment scheme\nreturned if there is an error in the proof/verification of …\nreturned if proof verification fails\nreturn when error during synthesis\nreturned if the supplied witness is not a satisfying …\nreturned if the supplied witness is not a satisfying …\nreturned when there is a Zeromorph error\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn implementation of the Nova <code>Engine</code> trait with BN254 …\nAn implementation of Nova traits with HyperKZG over the …\nAn implementation of the Nova <code>Engine</code> trait with BN254 …\nAn implementation of the Nova <code>Engine</code> trait with Grumpkin …\nAn implementation of the Nova <code>Engine</code> trait with Pallas …\nAn implementation of the Nova <code>Engine</code> trait with Secp256k1 …\nAn implementation of the Nova <code>Engine</code> trait with Secp256k1 …\nAn implementation of the Nova <code>Engine</code> trait with Vesta …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis module implements Nova’s evaluation engine using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module implements <code>EvaluationEngine</code> using an IPA-based …\nNon-hiding Zeromorph scheme for Multilinear Polynomials.\nProvides an implementation of a polynomial evaluation …\nProvides an implementation of a polynomial evaluation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA method to verify purported evaluations of a batch of …\nProvides an implementation of a polynomial evaluation …\nAn inner product argument\nProvides an implementation of the prover key\nProvides an implementation of the verifier key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA method to verify purported evaluations of a batch of …\nPolynomial Evaluation\nKZG Polynomial Commitment Scheme on univariate polynomial. …\nPolynomial and its associated types\nProofs\nCommitments\nPolynomial Evaluation\nZeromorph Polynomial Commitment Scheme on multilinear …\nProofs\n<code>ZMProverKey</code> is used to generate a proof\n<code>ZMVerifierKey</code> is used to check evaluation proofs for a …\nGenerate a commitment for a polynomial Note that the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …\nproof\nA type for functions that hints commitment key sizing by …\nA type that holds an R1CS instance\nA type that holds the result of a R1CS multiplication\nA type that holds the shape of the R1CS matrices\nA type that holds a witness for a given R1CS instance\nA type that holds a Relaxed R1CS instance\nA type that holds a witness for a given Relaxed R1CS …\nCommits to the witness using the supplied generators\nCommits to the witness using the supplied generators\nA method to compute a commitment to the cross-term <code>T</code> given …\nA method to compute a commitment to the cross-term <code>T</code> given …\nGenerates public parameters for a Rank-1 Constraint System …\nComputes the number of generators required for the …\nProduces a default <code>R1CSResult</code> given an <code>R1CSShape</code>\nProduces a default <code>RelaxedR1CSWitness</code> given an <code>R1CSShape</code>\nProduces a default <code>RelaxedR1CSInstance</code> given <code>R1CSGens</code> and …\nEmpty buffer for <code>commit_T_into</code>\nreturned the digest of the <code>R1CSShape</code>\nFolds an incoming <code>R1CSWitness</code> into the current one\nFolds an incoming <code>RelaxedR1CSInstance</code> into the current one\nMutably folds an incoming <code>R1CSWitness</code> into the current one\nMutably folds an incoming <code>RelaxedR1CSInstance</code> into the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes a new <code>RelaxedR1CSInstance</code> from an <code>R1CSInstance</code>\nInitializes a new <code>RelaxedR1CSInstance</code> from an <code>R1CSInstance</code>\nInitializes a new <code>RelaxedR1CSWitness</code> from an <code>R1CSWitness</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the R1CS instance is satisfiable given a witness …\nChecks if the Relaxed R1CS instance is satisfiable given a …\nCreate an object of type <code>R1CSShape</code> from the explicitly …\nA method to create a witness object using a vector of …\nA method to create an instance object using constituent …\nPads the <code>R1CSShape</code> so that the shape passes …\nPads the provided witness to the correct length\nGenerate a random <code>R1CSShape</code> with the specified number of …\nGenerate a satisfying <code>RelaxedR1CSWitness</code> and …\nThis module implements <code>BatchedRelaxedR1CSSNARKTrait</code> using …\nbatched pp snark\nThis module contains the definitions of polynomial types …\nCreates a vector of the first <code>n</code> powers of <code>s</code>.\nThis module implements <code>RelaxedR1CSSNARK</code> traits using a …\nThis module implements <code>RelaxedR1CSSNARKTrait</code> using Spartan …\nA succinct proof of knowledge of a witness to a batch of …\nA type that represents the prover’s key\nA type that represents the verifier’s key\nReturns the digest of the verifier’s key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA succinct proof of knowledge of a witness to a relaxed …\nA type that represents the prover’s key\nA type that represents the verifier’s key\nReturns the digest of the verifier’s key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain components:\nA multilinear extension of a polynomial $Z(\\cdot)$, denote …\nBinds the polynomial’s top variable using the given …\nEvaluates the polynomial at the given point. Returns Z(r) …\nEvaluates the polynomial with the given evaluations and …\nEvaluates the polynomial with the given evaluations and …\nevaluations of the polynomial in all the 2^num_vars …\nReturns the argument unchanged.\nReturns the number of variables in the multilinear …\nCalls <code>U::from(self)</code>.\nReturns true if no evaluations.\nReturns the total number of evaluations.\nCreates a new <code>MultilinearPolynomial</code> from the given …\nReturns a random polynomial\nA type that represents the prover’s key\nA type that holds a commitment to a sparse polynomial\nA type that holds <code>R1CSShape</code> in a form amenable to memory …\nA succinct proof of knowledge of a witness to a relaxed …\nA type that represents the verifier’s key\nReturns the digest of the verifier’s key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nrepresents <code>R1CSShape</code> in a Spark-friendly format amenable …\nproduces a succinct proof of satisfiability of a …\nverifies a proof of satisfiability of a <code>RelaxedR1CS</code> …\nA type that represents the prover’s key\nA succinct proof of knowledge of a witness to a relaxed …\nA type that represents the verifier’s key\nReturns the digest of the verifier’s key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nproduces a succinct proof of satisfiability of a …\nverifies a proof of satisfiability of a <code>RelaxedR1CS</code> …\nAuxiliary <code>PublicParams</code> information about the commitment …\nThe type of the step-circuits on the primary\nThe type of the step-circuits on the secondary\nA struct that manages all the digests of the primary …\nSuperNova helper trait, for implementors that provide sets …\nA vector of <code>R1CSWithArity</code> adjoined to a set of <code>PublicParams</code>\nA SNARK that proves the correct execution of an …\nA helper trait for a step of the incremental computation …\nA trivial step circuit that simply returns the input, for …\nA trivial step circuit that simply returns the input\nReturn the the number of inputs or outputs of each step …\nCompute the circuit digest of a supernova <code>StepCircuit</code>.\nReturn this <code>StepCircuit</code>’s assigned index, for use when …\nAll of the primary circuit digests of this <code>PublicParams</code>\nReturn the <code>CircuitDigests</code>’ digest.\nReturn the <code>PublicParams</code>’ digest.\nThis module defines errors returned by the library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>PublicParams</code> from a vector of raw <code>R1CSWithArity</code> …\nCreate a <code>PublicParams</code> from a vector of raw <code>R1CSWithArity</code> …\nInitial circuit index, defaults to zero.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBreaks down an instance of <code>PublicParams</code> into the circuit …\nConstruct a new <code>CircuitDigests</code>\niterate base step to get new instance of recursive SNARK\nHow many circuits are provided?\nReturns the number of constraints and variables of inner …\nReturns the number of constraints and variables of the …\nReturn a new instance of the primary circuit at <code>index</code>.\nexecuting a step of the incremental computation\nReturn a new instance of the secondary circuit.\nConstruct a new <code>PublicParams</code>\nThis module defines a final compressing SNARK for …\nSynthesize the circuit for a computation step and return …\nverify recursive snark\nInputs of the primary circuits\nOutputs of the primary circuits\nmissing commitment key\nNova error\nErrors returned by Nova\nExtended error for supernova\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA SNARK that proves the knowledge of a valid <code>RecursiveSNARK</code>\nA type that holds the prover key for <code>CompressedSNARK</code>\nA type that holds the verifier key for <code>CompressedSNARK</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>CompressedSNARK</code>\nCreates prover and verifier keys for <code>CompressedSNARK</code>\nVerify the correctness of the <code>CompressedSNARK</code>\nA helper trait to absorb different objects in RO\nA type representing an element of the base field of the …\nA type representing an element of the base field of the …\nA type that defines a commitment engine over scalars in …\nThe circuit alter ego of this trait impl - this constrains …\nA type representing constants/parameters associated with …\nA type representing constants/parameters associated with …\nThis is a convenience trait to pair engines which fields …\nConvenience projection to the secondary <code>Engine</code> of a …\nA collection of engines that are required by the library\nA type that represents an element of the group\nRepresents an element of a group This is currently …\nthe vanilla alter ego of this trait - this constrains it …\nDefines additional methods on <code>PrimeField</code> objects\nA type that represents a circuit-friendly sponge that …\nAn alternate implementation of <code>Self::RO</code> in the circuit …\nA helper trait that defines the behavior of a hash …\nAn alias for constants associated with <code>E::RO</code>\nAn alias for constants associated with <code>E::ROCircuit</code>\nA helper trait that defines the behavior of a hash …\nA type representing an element of the scalar field of the …\nA type representing an element of the scalar field of the …\nThe secondary <code>Engine</code> of <code>Self</code>\nA type that provides a generic Fiat-Shamir transcript to …\nThis trait defines the behavior of a transcript engine …\nThis trait allows types to implement how they want to be …\nAdds a scalar to the internal state\nAdds a scalar to the internal state\nabsorbs any type that implements <code>TranscriptReprTrait</code> under …\nAbsorbs the value in the provided RO\nThis module defines traits that a step function must …\nThis module defines a collection of traits that define the …\nadds a domain separator\nThis module defines a collection of traits that define the …\nReturns a scalar representing the bytes\nReturns A, B, the order of the group, the size of the base …\nInitializes the hash function\nInitializes the hash function\ninitializes the transcript\nThis module defines a collection of traits that define the …\nReturns a challenge of <code>num_bits</code> by hashing the internal …\nReturns a challenge of <code>num_bits</code> by hashing the internal …\nreturns a scalar element of the group as a challenge\nreturns a byte representation of self to be added to the …\nA helper trait for a step of the incremental computation …\nA trivial step circuit that simply returns the input\nReturn the number of inputs or outputs of each step (this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSythesize the circuit for a computation step and return …\nHolds the type of the commitment\nA trait that ties different pieces of the commitment …\nHolds the type of the commitment key The key should …\nThis trait defines the behavior of the commitment\nHolds the type of the compressed commitment\nA trait that helps determine the length of a structure. …\nA helper trait for types implementing scalar …\nCommits to the provided vector using the provided …\nCompresses self into a compressed commitment\nDecompresses a compressed commitment into a commitment\nReturns the length of the structure.\nSamples a new commitment key of a specified size\nReturns the coordinate representation of the commitment\nA type that holds the evaluation argument\nA trait that ties different pieces of the commitment …\nA type that holds the prover key\nA type that holds the verifier key\nA method to prove the evaluation of a multilinear …\nA method to perform any additional setup needed to produce …\nA method to verify the purported evaluation of a …\nA trait that defines the behavior of a <code>zkSNARK</code> to prove …\nA helper trait that defines the behavior of a verifier key …\nA type that represents the prover’s key\nA type that represents the prover’s key\nA trait that defines the behavior of a <code>zkSNARK</code>\nA type that represents the verifier’s key\nA type that represents the verifier’s key\nThis associated function (not a method) provides a hint …\nThis associated function (not a method) provides a hint …\nPublic parameter creation takes a size hint. This size …\nReturns the digest of the verifier’s key\nProduces a new SNARK for a relaxed R1CS\nProduces a new SNARK for a batch of relaxed R1CS\nProduces the keys for the prover and the verifier\nProduces the keys for the prover and the verifier\nVerifies a SNARK for a relaxed R1CS\nVerifies a SNARK for a batch of relaxed R1CS")