var searchIndex = new Map(JSON.parse('[\
["arecibo",{"doc":"This library implements Nova, a high-speed recursive SNARK.","t":"FFFFFFFNNNNNNNNNNNNNNHNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNCQNNNNNNNNNNNNNNNNNNNNNNCCNNNNNNNNCCNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQQSPPPPPPPPPPPPPPPPPPGGPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNCCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFIFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCHCCFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFRRFKFFKFFMNNNNNNNNNNNNNNHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNMNNNNNCMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGPNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKRRRRRRKIKRKRKRRKIIKRRRRKKMMMMCCMCMMMMMCMMMMKFMNNNNNNNNNNNNNNMNNNNNNRKRKRKKMMMMMMRKRRMMMKKRRKRRNNHMMMMMMM","n":["CompressedSNARK","ProverKey","PublicParams","R1CSWithArity","RecursiveSNARK","ResourceBuffer","VerifierKey","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_digest","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constants","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","digest","drop","drop","drop","drop","drop","drop","drop","entomb","eq","eq","errors","exhume","extent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","gadgets","impl_traits","init","init","init","init","init","init","init","into","into","into","into","into","into","into","new","new","num_constraints","num_steps","num_variables","outputs","prove","prove_step","provider","r1cs","serialize","serialize","serialize","serialize","serialize","serialize","setup","setup","spartan","supernova","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","traits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","z0_primary","zi_primary","zip_with","zip_with_for_each","NUM_HASH_BITS","DecompressionError","DigestError","IncorrectWitness","InternalError","InternalTranscriptError","InvalidCommitmentKeyLength","InvalidIndex","InvalidInitialInputLength","InvalidInputLength","InvalidMultisetProof","InvalidNumSteps","InvalidPCS","InvalidProductProof","InvalidStepCircuitIO","InvalidStepOutputLength","InvalidSumcheckProof","InvalidWitnessLength","LengthError","NovaError","PCSError","PCSError","ProofVerifyError","SynthesisError","UnSat","UnSatIndex","ZMError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","init","init","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ecc","AllocatedPoint","AllocatedPointNonInfinity","add","add_incomplete","add_internal","alloc","alloc","borrow","borrow","borrow_mut","borrow_mut","check_on_curve","clone","clone","clone_into","clone_into","conditionally_select","conditionally_select","default","deref","deref","deref_mut","deref_mut","double","double_incomplete","drop","drop","fmt","fmt","from","from","from_allocated_point","get_coordinates","get_coordinates","init","init","into","into","negate","new","scalar_mul","select_point_or_infinity","to_allocated_point","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Bn256EngineIPA","Bn256EngineKZG","Bn256EngineZM","GrumpkinEngine","PallasEngine","Secp256k1Engine","Secq256k1Engine","VestaEngine","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hyperkzg","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","ipa_pc","non_hiding_zeromorph","shplonk","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","EvaluationArgument","EvaluationEngine","batch_challenge_powers","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_challenge","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","fmt","fmt","from","from","get_batch_challenge","init","init","into","into","prove","serialize","setup","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verifier_second_challenge","verify","vzip","vzip","EvaluationEngine","InnerProductArgument","ProverKey","VerifierKey","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","prove","serialize","serialize","setup","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","UVKZGEvaluation","UVKZGPCS","UVKZGPoly","UVKZGProof","ZMCommitment","ZMEvaluation","ZMPCS","ZMProof","ZMProverKey","ZMVerifierKey","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coeffs","commit","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","open","proof","prove","serialize","serialize","setup","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","EvaluationArgument","EvaluationEngine","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","prove","serialize","serialize","setup","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","CommitmentKeyHint","R1CSInstance","R1CSResult","R1CSShape","R1CSWitness","RelaxedR1CSInstance","RelaxedR1CSWitness","absorb_in_ro","absorb_in_ro","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","commit_T","commit_T_into","commitment_key","commitment_key_size","default","default","default","default_T","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","drop","drop","entomb","eq","eq","eq","eq","eq","eq","exhume","extent","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold_mut","fold_mut","from","from","from","from","from","from","from_r1cs_instance","from_r1cs_instance_unchecked","from_r1cs_witness","init","init","init","init","init","init","into","into","into","into","into","into","is_sat","is_sat_relaxed","new","new","new","pad","pad","random","random_witness_instance","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_transcript_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","batched","batched_ppsnark","polys","powers","ppsnark","snark","BatchedRelaxedR1CSSNARK","ProverKey","VerifierKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ck_floor","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","digest","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","prove","prove","serialize","serialize","setup","setup","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","BatchedRelaxedR1CSSNARK","ProverKey","VerifierKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ck_floor","ck_floor","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","digest","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","prove","prove","serialize","serialize","setup","setup","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","multilinear","MultilinearPolynomial","add","bind_poly_var_top","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","evaluate","evaluate_with","evaluate_with_chis","evaluations","fmt","from","get_num_vars","index","init","into","is_empty","len","new","random","serialize","to_owned","try_from","try_into","type_id","vzip","ProverKey","R1CSShapeSparkCommitment","R1CSShapeSparkRepr","RelaxedR1CSSNARK","VerifierKey","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ck_floor","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","new","prove","serialize","serialize","serialize","serialize","setup","to_owned","to_owned","to_owned","to_owned","to_owned","to_transcript_bytes","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","ProverKey","RelaxedR1CSSNARK","VerifierKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","digest","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","prove","serialize","serialize","setup","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","AuxParams","C1","C2","CircuitDigests","NonUniformCircuit","PublicParams","RecursiveSNARK","StepCircuit","TrivialSecondaryCircuit","TrivialTestCircuit","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_digest","circuit_index","circuit_index","circuit_index","circuit_param_digests","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","digest","digest","drop","drop","drop","drop","drop","drop","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_parts","from_parts_unchecked","index","init","init","init","init","init","init","initial_circuit_index","into","into","into","into","into","into","into_parts","new","new","num_circuits","primary_circuit","prove_step","secondary_circuit","serialize","serialize","serialize","serialize","setup","snark","synthesize","synthesize","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","z0_primary","zi_primary","MissingCK","NovaError","SuperNovaError","UnSatIndex","borrow","borrow_mut","deref","deref_mut","drop","eq","fmt","fmt","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","CompressedSNARK","ProverKey","VerifierKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","prove","serialize","setup","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","AbsorbInROTrait","Base","Base","CE","CircuitRO","Constants","Constants","CurveCycleEquipped","Dual","Engine","GE","Group","NativeRO","PrimeFieldExt","RO","ROCircuit","ROCircuitTrait","ROConstants","ROConstantsCircuit","ROTrait","Scalar","Scalar","Secondary","TE","TranscriptEngineTrait","TranscriptReprTrait","absorb","absorb","absorb","absorb_in_ro","circuit","commitment","dom_sep","evaluation","from_uniform","group_params","new","new","new","snark","squeeze","squeeze","squeeze","to_transcript_bytes","StepCircuit","TrivialCircuit","arity","arity","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","init","into","synthesize","synthesize","to_owned","try_from","try_into","type_id","vzip","Commitment","CommitmentEngineTrait","CommitmentKey","CommitmentTrait","CompressedCommitment","Len","ScalarMul","commit","compress","decompress","length","setup","to_coordinates","EvaluationArgument","EvaluationEngineTrait","ProverKey","VerifierKey","prove","setup","verify","BatchedRelaxedR1CSSNARKTrait","DigestHelperTrait","ProverKey","ProverKey","RelaxedR1CSSNARKTrait","VerifierKey","VerifierKey","ck_floor","ck_floor","default_ck_hint","digest","prove","prove","setup","setup","verify","verify"],"q":[[0,"arecibo"],[160,"arecibo::constants"],[161,"arecibo::errors"],[222,"arecibo::gadgets"],[223,"arecibo::gadgets::ecc"],[276,"arecibo::provider"],[424,"arecibo::provider::hyperkzg"],[467,"arecibo::provider::ipa_pc"],[535,"arecibo::provider::non_hiding_zeromorph"],[716,"arecibo::provider::shplonk"],[757,"arecibo::r1cs"],[911,"arecibo::spartan"],[917,"arecibo::spartan::batched"],[970,"arecibo::spartan::batched_ppsnark"],[1024,"arecibo::spartan::polys"],[1025,"arecibo::spartan::polys::multilinear"],[1057,"arecibo::spartan::ppsnark"],[1156,"arecibo::spartan::snark"],[1214,"arecibo::supernova"],[1354,"arecibo::supernova::error"],[1376,"arecibo::supernova::snark"],[1423,"arecibo::traits"],[1467,"arecibo::traits::circuit"],[1491,"arecibo::traits::commitment"],[1504,"arecibo::traits::evaluation"],[1511,"arecibo::traits::snark"],[1528,"core::clone"],[1529,"core::result"],[1530,"serde::de"],[1531,"std::io::error"],[1532,"std::io"],[1533,"core::cmp"],[1534,"core::option"],[1535,"core::fmt"],[1536,"core::fmt"],[1537,"core::any"],[1538,"alloc::vec"],[1539,"bellpepper_core::constraint_system"],[1540,"core::error"],[1541,"alloc::string"],[1542,"bellpepper_core::constraint_system"],[1543,"bellpepper_core::gadgets::boolean"],[1544,"pairing"],[1545,"pairing"],[1546,"core::borrow"],[1547,"core::default"],[1548,"rand_core"],[1549,"rand_core"],[1550,"core::ops::function"],[1551,"alloc::boxed"],[1552,"ff"],[1553,"core::marker"],[1554,"num_bigint::bigint"],[1555,"core::cmp"]],"d":["A SNARK that proves the knowledge of a valid <code>RecursiveSNARK</code>","A type that holds the prover key for <code>CompressedSNARK</code>","A type that holds public parameters of Nova","A type that holds parameters for the primary and secondary …","A SNARK that proves the correct execution of an …","A resource buffer for <code>RecursiveSNARK</code> for storing scratch …","A type that holds the verifier key for <code>CompressedSNARK</code>","","","","","","","","","","","","","","","Compute the circuit digest of a <code>StepCircuit</code>.","","","","","","","","","","","","","Global Nova constants","","","","","","","","","","","","","","","","","","","","Return the <code>R1CSWithArity</code>’ digest.","Retrieve the digest of the public parameters.","","","","","","","","","","","This module defines errors returned by the library.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This module implements various gadgets necessary for Nova …","This implementation behaves in ways specific to the …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>R1CSWithArity</code>","Create new instance of recursive SNARK","Returns the number of constraints in the primary and …","The number of steps which have been executed thus far.","Returns the number of variables in the primary and …","Get the outputs after the last step of computation.","Create a new <code>CompressedSNARK</code>","Create a new <code>RecursiveSNARK</code> (or updates the provided …","This module implements Nova’s traits using the following …","This module defines R1CS related types and a folding …","","","","","","","Set up builder to create <code>PublicParams</code> for a pair of …","Creates prover and verifier keys for <code>CompressedSNARK</code>","This module implements <code>RelaxedR1CSSNARKTrait</code> using Spartan …","SuperNova Description","","","","","","","This module defines various traits required by the users …","","","","","","","","","","","","","","","","","","","","","","Verify the correctness of the <code>RecursiveSNARK</code>","Verify the correctness of the <code>CompressedSNARK</code>","","","","","","","","Inputs of the primary circuits","Outputs of the primary circuits","Macros to give syntactic sugar for zipWith pattern and …","Like <code>zip_with</code> but use <code>for_each</code> instead of <code>map</code>.","Bit size of Nova field element hashes","returned when the supplied compressed commitment cannot be …","returned when there is an error creating a digest","returned when the consistency with public IO and …","returned when the prover cannot prove the provided …","returned when the transcript engine encounters an overflow …","returned if the provided commitment key is not of …","returned if the supplied row or col in (row,col,val) tuple …","returned when the initial input to an incremental …","returned if the supplied input is not of the right length","returned when the multiset check fails","returned if the provided number of steps is zero","returned when an invalid PCS evaluation argument is …","returned when the product proof check fails","returned if the step circuit calls inputize or alloc_io in …","returned when the step execution produces an output whose …","returned when an invalid sum-check proof is provided","returned if the supplied witness is not of the right length","returned when a length check fails in a PCS","Errors returned by Nova","Errors specific to the Polynomial commitment scheme","returned if there is an error in the proof/verification of …","returned if proof verification fails","return when error during synthesis","returned if the supplied witness is not a satisfying …","returned if the supplied witness is not a satisfying …","returned when there is a Zeromorph error","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","This module implements various elliptic curve gadgets","<code>AllocatedPoint</code> provides an elliptic curve abstraction …","<code>AllocatedPoint</code> but one that is guaranteed to be not …","Add two points (may be equal)","Add two points assuming self != +/- other","Adds other point to this point and returns the result. …","Allocates a new point on the curve using coordinates …","Allocates a new point on the curve using coordinates …","","","","","checks if <code>self</code> is on the curve or if it is infinity","","","","","If condition outputs a otherwise outputs b","If condition outputs a otherwise outputs b","Allocates a default point on the curve, set to the …","","","","","Doubles the supplied point.","doubles the point; since this is called with a point not …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Turns an <code>AllocatedPoint</code> into an <code>AllocatedPointNonInfinity</code> …","Returns coordinates associated with the point.","Returns coordinates associated with the point.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Negates the provided point","Creates a new <code>AllocatedPointNonInfinity</code> from the specified …","A gadget for scalar multiplication, optimized to use …","If condition outputs a otherwise infinity","Returns an <code>AllocatedPoint</code> from an <code>AllocatedPointNonInfinity</code>","","","","","","","","","","","An implementation of the Nova <code>Engine</code> trait with BN254 …","An implementation of Nova traits with HyperKZG over the …","An implementation of the Nova <code>Engine</code> trait with BN254 …","An implementation of the Nova <code>Engine</code> trait with Grumpkin …","An implementation of the Nova <code>Engine</code> trait with Pallas …","An implementation of the Nova <code>Engine</code> trait with Secp256k1 …","An implementation of the Nova <code>Engine</code> trait with Secp256k1 …","An implementation of the Nova <code>Engine</code> trait with Vesta …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This module implements Nova’s evaluation engine using …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This module implements <code>EvaluationEngine</code> using an IPA-based …","Non-hiding Zeromorph scheme for Multilinear Polynomials.","Shplonk PCS","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides an implementation of a polynomial evaluation …","Provides an implementation of a polynomial evaluation …","Compute powers of q : (1, q, q^2, …, q^(k-1))","","","","","","","","","TODO: write doc","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","TODO: write doc","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","TODO: write doc","A method to verify purported evaluations of a batch of …","","","Provides an implementation of a polynomial evaluation …","An inner product argument","Provides an implementation of the prover key","Provides an implementation of the verifier key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A method to verify purported evaluations of a batch of …","","","","","Polynomial Evaluation","KZG Polynomial Commitment Scheme on univariate polynomial. …","Polynomial and its associated types","Proofs","Commitments","Polynomial Evaluation","Zeromorph Polynomial Commitment Scheme on multilinear …","Proofs","<code>ZMProverKey</code> is used to generate a proof","<code>ZMVerifierKey</code> is used to check evaluation proofs for a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a commitment for a polynomial Note that the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","EvaluationArgument of Shplonk","EvaluationEngine of Shplonk","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A method to verify purported evaluations of a batch of …","","","A type for functions that hints commitment key sizing by …","A type that holds an R1CS instance","A type that holds the result of a R1CS multiplication","A type that holds the shape of the R1CS matrices","A type that holds a witness for a given R1CS instance","A type that holds a Relaxed R1CS instance","A type that holds a witness for a given Relaxed R1CS …","","","","","","","","","","","","","","","","","","","","","","","","","","","Commits to the witness using the supplied generators","Commits to the witness using the supplied generators","A method to compute a commitment to the cross-term <code>T</code> given …","A method to compute a commitment to the cross-term <code>T</code> given …","Generates public parameters for a Rank-1 Constraint System …","Computes the number of generators required for the …","Produces a default <code>R1CSResult</code> given an <code>R1CSShape</code>","Produces a default <code>RelaxedR1CSWitness</code> given an <code>R1CSShape</code>","Produces a default <code>RelaxedR1CSInstance</code> given <code>R1CSGens</code> and …","Empty buffer for <code>commit_T_into</code>","","","","","","","","","","","","","","","","","","","returned the digest of the <code>R1CSShape</code>","","","","","","","","","","","","","","","","","","","","","","Folds an incoming <code>R1CSWitness</code> into the current one","Folds an incoming <code>RelaxedR1CSInstance</code> into the current one","Mutably folds an incoming <code>R1CSWitness</code> into the current one","Mutably folds an incoming <code>RelaxedR1CSInstance</code> into the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initializes a new <code>RelaxedR1CSInstance</code> from an <code>R1CSInstance</code>","Initializes a new <code>RelaxedR1CSInstance</code> from an <code>R1CSInstance</code>","Initializes a new <code>RelaxedR1CSWitness</code> from an <code>R1CSWitness</code>","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the R1CS instance is satisfiable given a witness …","Checks if the Relaxed R1CS instance is satisfiable given a …","Create an object of type <code>R1CSShape</code> from the explicitly …","A method to create a witness object using a vector of …","A method to create an instance object using constituent …","Pads the <code>R1CSShape</code> so that the shape passes …","Pads the provided witness to the correct length","Generate a random <code>R1CSShape</code> with the specified number of …","Generate a satisfying <code>RelaxedR1CSWitness</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This module implements <code>BatchedRelaxedR1CSSNARKTrait</code> using …","batched pp snark","This module contains the definitions of polynomial types …","Creates a vector of the first <code>n</code> powers of <code>s</code>.","This module implements <code>RelaxedR1CSSNARK</code> traits using a …","This module implements <code>RelaxedR1CSSNARKTrait</code> using Spartan …","A succinct proof of knowledge of a witness to a batch of …","A type that represents the prover’s key","A type that represents the verifier’s key","","","","","","","","","","","","","","","Returns the digest of the verifier’s key.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","A succinct proof of knowledge of a witness to a relaxed …","A type that represents the prover’s key","A type that represents the verifier’s key","","","","","","","","","","","","","","","","Returns the digest of the verifier’s key","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Main components:","A multilinear extension of a polynomial $Z(\\\\cdot)$, denote …","","Binds the polynomial’s top variable using the given …","","","","","","","","","","Evaluates the polynomial at the given point. Returns Z(r) …","Evaluates the polynomial with the given evaluations and …","Evaluates the polynomial with the given evaluations and …","evaluations of the polynomial in all the 2^num_vars …","","Returns the argument unchanged.","Returns the number of variables in the multilinear …","","","Calls <code>U::from(self)</code>.","Returns true if no evaluations.","Returns the total number of evaluations.","Creates a new <code>MultilinearPolynomial</code> from the given …","Returns a random polynomial","","","","","","","A type that represents the prover’s key","A type that holds a commitment to a sparse polynomial","A type that holds <code>R1CSShape</code> in a form amenable to memory …","A succinct proof of knowledge of a witness to a relaxed …","A type that represents the verifier’s key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the digest of the verifier’s key","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","represents <code>R1CSShape</code> in a Spark-friendly format amenable …","produces a succinct proof of satisfiability of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","verifies a proof of satisfiability of a <code>RelaxedR1CS</code> …","","","","","","A type that represents the prover’s key","A succinct proof of knowledge of a witness to a relaxed …","A type that represents the verifier’s key","","","","","","","","","","","","","","","","","","","","Returns the digest of the verifier’s key.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","produces a succinct proof of satisfiability of a …","","","","","","","","","","","","","","","","verifies a proof of satisfiability of a <code>RelaxedR1CS</code> …","","","","Auxiliary <code>PublicParams</code> information about the commitment …","The type of the step-circuits on the primary","The type of the step-circuits on the secondary","A struct that manages all the digests of the primary …","SuperNova helper trait, for implementors that provide sets …","A vector of <code>R1CSWithArity</code> adjoined to a set of <code>PublicParams</code>","A SNARK that proves the correct execution of an …","A helper trait for a step of the incremental computation …","A trivial step circuit that simply returns the input, for …","A trivial step circuit that simply returns the input","Return the the number of inputs or outputs of each step …","","","","","","","","","","","","","","","Compute the circuit digest of a supernova <code>StepCircuit</code>.","Return this <code>StepCircuit</code>’s assigned index, for use when …","","","All of the primary circuit digests of this <code>PublicParams</code>","","","","","","","","","","","","","","","","","","","","","","","","","Return the <code>CircuitDigests</code>’ digest.","Return the <code>PublicParams</code>’ digest.","","","","","","","","","This module defines errors returned by the library.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>PublicParams</code> from a vector of raw <code>R1CSWithArity</code> …","Create a <code>PublicParams</code> from a vector of raw <code>R1CSWithArity</code> …","","","","","","","","Initial circuit index, defaults to zero.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Breaks down an instance of <code>PublicParams</code> into the circuit …","Construct a new <code>CircuitDigests</code>","iterate base step to get new instance of recursive SNARK","How many circuits are provided?","Return a new instance of the primary circuit at <code>index</code>.","executing a step of the incremental computation","Return a new instance of the secondary circuit.","","","","","Construct a new <code>PublicParams</code>","This module defines a final compressing SNARK for …","Synthesize the circuit for a computation step and return …","","","","","","","","","","","","","","","","","","","","","","","","","verify recursive snark","","","","","","","Inputs of the primary circuits","Outputs of the primary circuits","missing commitment key","Nova error","Errors returned by Nova","Extended error for supernova","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","A SNARK that proves the knowledge of a valid <code>RecursiveSNARK</code>","A type that holds the prover key for <code>CompressedSNARK</code>","A type that holds the verifier key for <code>CompressedSNARK</code>","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>CompressedSNARK</code>","","Creates prover and verifier keys for <code>CompressedSNARK</code>","","","","","","","","","","Verify the correctness of the <code>CompressedSNARK</code>","","","","A helper trait to absorb different objects in RO","A type representing an element of the base field of the …","A type representing an element of the base field of the …","A type that defines a commitment engine over scalars in …","The circuit alter ego of this trait impl - this constrains …","A type representing constants/parameters associated with …","A type representing constants/parameters associated with …","This is a convenience trait to pair engines which fields …","Convenience projection to the secondary <code>Engine</code> of a …","A collection of engines that are required by the library","A type that represents an element of the group","Represents an element of a group This is currently …","the vanilla alter ego of this trait - this constrains it …","Defines additional methods on <code>PrimeField</code> objects","A type that represents a circuit-friendly sponge that …","An alternate implementation of <code>Self::RO</code> in the circuit …","A helper trait that defines the behavior of a hash …","An alias for constants associated with <code>E::RO</code>","An alias for constants associated with <code>E::ROCircuit</code>","A helper trait that defines the behavior of a hash …","A type representing an element of the scalar field of the …","A type representing an element of the scalar field of the …","The secondary <code>Engine</code> of <code>Self</code>","A type that provides a generic Fiat-Shamir transcript to …","This trait defines the behavior of a transcript engine …","This trait allows types to implement how they want to be …","Adds a scalar to the internal state","Adds a scalar to the internal state","absorbs any type that implements <code>TranscriptReprTrait</code> under …","Absorbs the value in the provided RO","This module defines traits that a step function must …","This module defines a collection of traits that define the …","adds a domain separator","This module defines a collection of traits that define the …","Returns a scalar representing the bytes","Returns A, B, the order of the group, the size of the base …","Initializes the hash function","Initializes the hash function","initializes the transcript","This module defines a collection of traits that define the …","Returns a challenge of <code>num_bits</code> by hashing the internal …","Returns a challenge of <code>num_bits</code> by hashing the internal …","returns a scalar element of the group as a challenge","returns a byte representation of self to be added to the …","A helper trait for a step of the incremental computation …","A trivial step circuit that simply returns the input","Return the number of inputs or outputs of each step (this …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Sythesize the circuit for a computation step and return …","","","","","","","Holds the type of the commitment","A trait that ties different pieces of the commitment …","Holds the type of the commitment key The key should …","This trait defines the behavior of the commitment","Holds the type of the compressed commitment","A trait that helps determine the length of a structure. …","A helper trait for types implementing scalar …","Commits to the provided vector using the provided …","Compresses self into a compressed commitment","Decompresses a compressed commitment into a commitment","Returns the length of the structure.","Samples a new commitment key of a specified size","Returns the coordinate representation of the commitment","A type that holds the evaluation argument","A trait that ties different pieces of the commitment …","A type that holds the prover key","A type that holds the verifier key","A method to prove the evaluation of a multilinear …","A method to perform any additional setup needed to produce …","A method to verify the purported evaluation of a …","A trait that defines the behavior of a <code>zkSNARK</code> to prove …","A helper trait that defines the behavior of a verifier key …","A type that represents the prover’s key","A type that represents the prover’s key","A trait that defines the behavior of a <code>zkSNARK</code>","A type that represents the verifier’s key","A type that represents the verifier’s key","This associated function (not a method) provides a hint …","This associated function (not a method) provides a hint …","Public parameter creation takes a size hint. This size …","Returns the digest of the verifier’s key","Produces a new SNARK for a relaxed R1CS","Produces a new SNARK for a batch of relaxed R1CS","Produces the keys for the prover and the verifier","Produces the keys for the prover and the verifier","Verifies a SNARK for a relaxed R1CS","Verifies a SNARK for a batch of relaxed R1CS"],"i":[0,0,0,0,0,0,0,2,5,7,8,9,12,17,2,5,7,8,9,12,17,0,2,5,7,8,9,12,2,5,7,8,9,12,0,2,5,7,8,9,12,17,2,5,7,8,9,12,17,2,5,7,8,17,2,5,2,5,7,8,9,12,17,2,2,5,0,2,2,2,5,7,8,9,12,17,2,5,7,8,9,12,17,0,0,2,5,7,8,9,12,17,2,5,7,8,9,12,17,2,8,5,8,5,8,17,8,0,0,2,5,7,8,12,17,5,17,0,0,2,5,7,8,9,12,0,2,5,7,8,9,12,17,2,5,7,8,9,12,17,2,5,7,8,9,12,17,8,17,2,5,7,8,9,12,17,8,8,0,0,0,29,29,29,29,29,29,29,29,29,29,29,34,29,29,29,29,29,34,0,0,29,29,29,29,29,34,29,34,29,34,29,34,29,34,29,34,29,34,29,29,34,34,29,29,29,34,29,34,29,34,29,29,34,29,34,29,34,29,34,29,34,0,0,0,38,41,38,38,41,38,41,38,41,38,38,41,38,41,38,41,38,38,41,38,41,38,41,38,41,38,41,38,41,41,38,41,38,41,38,41,38,41,38,38,41,38,41,38,41,38,41,38,41,38,41,0,0,0,0,0,0,0,0,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,0,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,0,0,0,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,45,46,47,48,49,50,51,52,0,0,55,53,55,53,55,53,55,53,55,55,53,55,53,55,53,53,55,53,55,53,55,55,53,55,53,55,55,53,55,53,55,53,55,53,55,53,55,55,55,53,55,0,0,0,0,64,65,62,63,64,65,62,63,62,63,62,63,64,65,62,63,64,65,62,63,63,64,65,62,63,64,65,62,63,64,65,62,63,64,65,62,63,64,65,62,63,62,65,63,62,62,63,64,65,62,63,64,65,62,63,64,65,62,63,62,64,65,62,63,0,0,0,0,0,0,0,0,0,0,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,75,68,66,67,68,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,73,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,68,67,74,70,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,74,66,67,68,69,70,71,72,73,74,0,0,78,79,78,79,78,79,78,79,78,79,78,79,78,79,78,79,78,79,78,79,78,79,78,79,79,78,79,79,78,79,78,79,78,79,78,79,79,78,79,0,0,0,0,0,0,0,80,81,28,82,83,80,84,81,28,82,83,80,84,81,28,82,83,80,84,81,28,82,83,80,84,81,83,84,28,28,0,0,82,84,81,0,28,82,83,80,84,81,28,82,83,80,84,81,28,82,83,80,84,81,28,28,82,83,80,84,81,28,28,82,83,80,84,81,28,28,28,82,83,80,84,81,84,81,84,81,28,82,83,80,84,81,81,81,84,28,82,83,80,84,81,28,82,83,80,84,81,28,28,28,83,80,28,84,28,28,28,82,83,80,84,81,28,82,83,80,84,81,81,28,82,83,80,84,81,28,82,83,80,84,81,28,82,83,80,84,81,28,82,83,80,84,81,0,0,0,0,0,0,0,0,0,90,93,92,90,93,92,90,90,93,92,90,93,92,90,92,90,93,92,90,93,92,90,93,92,90,93,92,90,93,92,90,90,90,92,90,90,90,93,92,90,93,92,90,93,92,90,90,90,93,92,0,0,0,96,95,94,96,95,94,94,94,96,95,94,96,95,94,94,95,96,95,94,96,95,94,96,95,94,96,95,94,96,95,94,94,94,95,94,94,94,96,95,94,96,95,94,96,95,94,94,94,96,95,94,0,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,0,0,0,101,102,103,104,105,101,102,103,104,105,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,105,104,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,105,101,102,104,105,105,101,102,103,104,105,102,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,105,101,102,103,104,105,0,0,0,106,107,108,106,107,108,106,107,108,106,107,108,106,107,108,106,107,108,108,107,106,107,108,106,107,108,106,107,108,106,107,108,106,107,108,108,107,108,108,106,107,108,106,107,108,106,107,108,106,107,108,108,106,107,108,0,118,118,0,0,0,0,0,0,0,109,110,111,110,111,113,112,114,115,110,111,113,112,114,115,0,109,110,111,112,110,111,114,115,110,111,114,115,110,111,110,111,113,113,112,114,115,110,111,113,112,114,115,115,113,112,110,111,113,112,114,115,113,114,0,110,111,113,112,114,115,110,111,113,112,114,115,112,112,112,110,111,113,112,114,115,118,110,111,113,112,114,115,112,113,115,118,118,115,118,113,112,114,115,112,0,109,110,111,110,111,114,115,110,111,113,112,114,115,110,111,113,112,114,115,110,111,113,112,114,115,115,110,111,113,112,114,115,115,115,119,119,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,0,0,122,123,120,122,123,120,122,123,120,122,123,120,120,122,123,120,122,123,120,122,123,120,122,123,120,122,123,120,120,120,120,122,123,120,122,123,120,122,123,120,120,122,123,120,0,39,4,4,126,126,127,0,0,0,4,0,127,0,4,4,0,0,0,0,39,4,6,4,0,0,126,127,58,133,0,0,58,0,134,39,126,127,58,0,126,127,58,132,0,0,1,136,136,136,136,136,136,136,136,136,136,136,136,136,136,1,136,136,136,136,136,136,144,0,144,0,138,0,0,144,138,138,140,144,138,91,0,91,91,91,91,91,0,0,10,121,0,10,121,10,121,0,141,10,121,10,121,10,121],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],1],[[[2,[-1]]],[[2,[-1]]],[3,4]],[[[5,[-1]]],[[5,[-1]]],[6,3]],[[[7,[-1]]],[[7,[-1]]],[3,4]],[[[8,[-1]]],[[8,[-1]]],[6,3]],[[[9,[-1,-2,-3]]],[[9,[-1,-2,-3]]],[6,3],[[10,[-1]],3],[[10,[[11,[-1]]]],3]],[[[12,[-1,-2,-3]]],[[12,[-1,-2,-3]]],[6,3],[[10,[-1]],3],[[10,[[11,[-1]]]],3]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[2,[-2]]]]],16,4],[-1,[[15,[[5,[-2]]]]],16,6],[-1,[[15,[[7,[-2]]]]],16,4],[-1,[[15,[[8,[-2]]]]],16,6],[-1,[[15,[[17,[-2,-3,-4]]]]],16,6,[[10,[-2]]],[[10,[[11,[-2]]]]]],[[[2,[-1]]],[],4],[[[5,[-1]]],[],6],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[[[2,[-1]],-2],[[18,[13]]],4,19],[[[2,[-1]],[2,[-1]]],20,[21,4]],[[[5,[-1]],[5,[-1]]],20,[6,21]],0,[[[2,[-1]],[23,[22]]],[[24,[[23,[22]]]]],4],[[[2,[-1]]],14,4],[[[2,[-1]],25],26,[27,4]],[[[5,[-1]],25],26,[6,27]],[[[7,[-1]],25],26,[27,4]],[[[8,[-1]],25],26,[6,27]],[[[9,[-1,-2,-3]],25],26,[6,27],[[10,[-1]],27],[[10,[[11,[-1]]]],27]],[[[12,[-1,-2,-3]],25],26,[6,27],[[10,[-1]],27],[[10,[[11,[-1]]]],27]],[[[17,[-1,-2,-3]],25],26,[6,27],[[10,[-1]],27],[[10,[[11,[-1]]]],27]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1]],14],[[2,[-1]]],4],[[[5,[-1]],-2,-3,23,23],[[15,[[8,[-1]],29]]],6,1,1],[[[5,[-1]]],[[13,[14,14]]],6],[[[8,[-1]]],14,6],[[[5,[-1]]],[[13,[14,14]]],6],[[[8,[-1]]],[[13,[23,23]]],6],[[[5,[-1]],[9,[-1,-2,-3]],[8,[-1]]],[[15,[[17,[-1,-2,-3]],29]]],6,[[10,[-1]]],[[10,[[11,[-1]]]]]],[[[8,[-1]],[5,[-1]],-2,-3],[[15,[13,29]]],6,1,1],0,0,[[[2,[-1]],-2],15,4,30],[[[5,[-1]],-2],15,6,30],[[[7,[-1]],-2],15,4,30],[[[8,[-1]],-2],15,6,30],[[[12,[-1,-2,-3]],-4],15,6,[[10,[-1]]],[[10,[[11,[-1]]]]],30],[[[17,[-1,-2,-3]],-4],15,6,[[10,[-1]]],[[10,[[11,[-1]]]]],30],[[-1,-2,[31,[-3]],[31,[[11,[-3]]]]],[[15,[[5,[-3]],29]]],1,1,6],[[[5,[-1]]],[[15,[[13,[[9,[-1,-2,-3]],[12,[-1,-2,-3]]]],29]]],6,[[10,[-1]]],[[10,[[11,[-1]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[8,[-1]],[5,[-1]],14,23,23],[[15,[[13,[33,33]],29]]],6],[[[17,[-1,-2,-3]],[12,[-1,-2,-3]],14,23,23],[[15,[[13,[33,33]],29]]],6,[[10,[-1]]],[[10,[[11,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],33,6],[[[8,[-1]]],33,6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,13],[14,13],[[29,29],20],[[34,34],20],[[29,25],26],[[29,25],26],[[34,25],26],[[34,25],26],[34,29],[-1,-1,[]],[35,29],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[29,[[24,[36]]]],[-1,37,[]],[-1,37,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[38,[-1]],-2,[38,[-1]]],[[15,[[38,[-1]],35]]],39,40],[[[41,[-1]],-2,[41,[-1]]],[[15,[[41,[-1]],35]]],39,40],[[[38,[-1]],-2,[38,[-1]],42],[[15,[[38,[-1]],35]]],39,40],[[-1,[24,[[13,[20]]]]],[[15,[[38,[-2]],35]]],40,39],[[-1,[24,[13]]],[[15,[[41,[-2]],35]]],40,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],-2],[[15,[13,35]]],39,40],[[[38,[-1]]],[[38,[-1]]],[3,39]],[[[41,[-1]]],[[41,[-1]]],[3,39]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,[38,[-2]],[38,[-2]],43],[[15,[[38,[-2]],35]]],40,39],[[-1,[41,[-2]],[41,[-2]],43],[[15,[[41,[-2]],35]]],40,39],[-1,[[15,[[38,[-2]],35]]],40,39],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[[38,[-1]],-2],[[15,[[38,[-1]],35]]],39,40],[[[41,[-1]],-2],[[15,[[41,[-1]],35]]],39,40],[14,13],[14,13],[[[38,[-1]],25],26,[27,39]],[[[41,[-1]],25],26,[27,39]],[-1,-1,[]],[-1,-1,[]],[[[38,[-1]]],[[41,[-1]]],39],[[[38,[-1]]],[[13,[44,44,44]]],39],[[[41,[-1]]],[[13,[44,44]]],39],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],-2],[[15,[[38,[-1]],35]]],39,40],[[44,44],[[41,[-1]]],39],[[[38,[-1]],-2,[23,[42]]],[[15,[[38,[-1]],35]]],39,40],[[-1,[38,[-2]],43],[[15,[[38,[-2]],35]]],40,39],[[[41,[-1]],44],[[15,[[38,[-1]],35]]],39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[[45,45],20],[[46,46],20],[[47,47],20],[[48,48],20],[[49,49],20],[[50,50],20],[[51,51],20],[[52,52],20],[[45,25],26],[[46,25],26],[[47,25],26],[[48,25],26],[[49,25],26],[[50,25],26],[[51,25],26],[[52,25],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[14,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1]]],[[53,[-1]]],[3,54]],[[[55,[-1,-2]]],[[55,[-1,-2]]],3,3],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[23,-2],[],[[4,[],[[56,[]],[57,[]]]]],[[58,[-1]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[53,[-2]]]]],16,54],[14,13],[14,13],[[[53,[-1]],25],26,[27,54]],[[[55,[-1,-2]],25],26,27,27],[-1,-1,[]],[-1,-1,[]],[[[23,[33]],-2],[],[[4,[],[[56,[]],[57,[]]]]],[[58,[-1]]]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[0,[-1]],-2,[0,[-3]],23,23],[[15,[-4,29]]],59,[],[[4,[],[[56,[]],[57,[]],[60,[[0,[-1]]]]]]],[]],[[[53,[-1]],-2],15,54,30],[[[61,[[0,[-1]]]]],[[13,[-2,-3]]],59,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[[23,-2],[],[[4,[],[[56,[]],[57,[]]]]],[[58,[-1]]]],[[-1,[0,[-3]],23,-4],[[15,[13,29]]],[],59,[[4,[],[[56,[]],[57,[]],[60,[[0,[-2]]]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[-1]]],[[62,[-1]]],3],[[[63,[-1]]],[[63,[-1]]],[3,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[63,[-2]]]]],16,4],[14,13],[14,13],[14,13],[14,13],[[[64,[-1]],25],26,[27,4]],[[[65,[-1]],25],26,[27,4]],[[[62,[-1]],25],26,27],[[[63,[-1]],25],26,[27,4]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,23,23],[[15,[-2,29]]],[],[]],[[[65,[-1]],-2],15,4,30],[[[63,[-1]],-2],15,4,30],[61,[[13,[-1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[-1,23,-2],[[15,[13,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1]]],[[66,[-1]]],[3,54]],[[[67,[-1]]],[[67,[-1]]],[3,54]],[[[68,[-1]]],[[68,[-1]]],3],[[[69,[-1]]],[[69,[-1]]],[3,54]],[[[70,[-1]]],[[70,[-1]]],[3,54]],[[[71,[-1]]],[[71,[-1]]],[3,54]],[[[72,[-1]]],[[72,[-1]]],[3,54]],[[[73,[-1]]],[[73,[-1]]],[3,54]],[[[74,[-1,-2]]],[[74,[-1,-2]]],3,3],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,[[-2,75],[[15,[[0,[-1]],29]]],59,[[76,[[0,[-1]]]]]],[[],[[66,[-1]]],[77,54]],[[],[[67,[-1]]],[77,54]],[[],[[68,[-1]]],77],[[],[[71,[-1]]],[77,54]],[[],[[72,[-1]]],[77,54]],[[],[[73,[-1]]],[77,54]],[[],[[74,[-1,-2]]],77,77],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[73,[-2]]]]],16,54],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[[[66,[-1]],[66,[-1]]],20,[21,54]],[[[67,[-1]],[67,[-1]]],20,[21,54]],[[[68,[-1]],[68,[-1]]],20,21],[[[69,[-1]],[69,[-1]]],20,[21,54]],[[[70,[-1]],[70,[-1]]],20,[21,54]],[[[71,[-1]],[71,[-1]]],20,[21,54]],[[[72,[-1]],[72,[-1]]],20,[21,54]],[[[73,[-1]],[73,[-1]]],20,[21,54]],[[[74,[-1,-2]],[74,[-1,-2]]],20,21,21],[[[66,[-1]],25],26,[27,54]],[[[67,[-1]],25],26,[27,54]],[[[68,[-1]],25],26,27],[[[69,[-1]],25],26,[27,54]],[[[70,[-1]],25],26,[27,54]],[[[71,[-1]],25],26,[27,54]],[[[72,[-1]],25],26,[27,54]],[[[73,[-1]],25],26,[27,54]],[[[74,[-1,-2]],25],26,27,27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[66,[-1]]],[[72,[-1]]],54],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,75],[[15,[[13,[[67,[-1]],[66,[-1]]]],29]]],59,[[76,[[0,[-1]]]]]],0,[[[0,[-1]],-2,23,23],[[15,[-3,29]]],59,[],[]],[[[70,[-1]],-2],15,54,30],[[[73,[-1]],-2],15,54,30],[[[61,[[0,[-1]]]]],[[13,[-2,-3]]],59,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[-1,23,-2],[[15,[13,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1]]],[[78,[-1]]],[3,54]],[[[79,[-1,-2]]],[[79,[-1,-2]]],3,3],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[78,[-2]]]]],16,54],[-1,[[15,[[79,[-2,-3]]]]],16,[],[]],[14,13],[14,13],[[[78,[-1]],25],26,[27,54]],[[[79,[-1,-2]],25],26,27,27],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[[[0,[-1]],[0,[-1]],[0,[-2]],23,23],[[15,[[78,[-1]],29]]],59,[[4,[],[[56,[]],[57,[]],[60,[[0,[-1]]]]]]]],[[[78,[-1]],-2],15,54,30],[[[79,[-1,-2]],-3],15,[],[],30],[[[61,[[0,[-1]]]]],[[13,[[0,[-1]],[0,[-1]]]]],59],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[[[0,[-1]],[0,[-2]],23,[78,[-1]]],[[15,[13,29]]],59,[[4,[],[[56,[]],[57,[]],[60,[[0,[-1]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[[80,[-1]]],13,4],[[[81,[-1]]],13,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1]]],[[28,[-1]]],[3,4]],[[[82,[-1]]],[[82,[-1]]],[3,4]],[[[83,[-1]]],[[83,[-1]]],[3,4]],[[[80,[-1]]],[[80,[-1]]],[3,4]],[[[84,[-1]]],[[84,[-1]]],[3,4]],[[[81,[-1]]],[[81,[-1]]],[3,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[83,[-1]]],[],4],[[[84,[-1]]],13,4],[[[28,[-1]],[81,[-1]],[84,[-1]],[80,[-1]],[83,[-1]]],[[15,[[13,[33]],29]]],4],[[[28,[-1]],[81,[-1]],[84,[-1]],[80,[-1]],[83,[-1]],33,[82,[-1]],[82,[-1]]],[[15,[29]]],4],[[[28,[-1]],[31,[-1]]],[],4],[[[28,[-1]],[31,[-1]]],14,4],[14,[[82,[-1]]],4],[[[28,[-1]]],[[84,[-1]]],4],[[[28,[-1]]],[[81,[-1]]],4],[14,33],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[28,[-2]]]]],16,4],[-1,[[15,[[82,[-2]]]]],16,4],[-1,[[15,[[83,[-2]]]]],16,4],[-1,[[15,[[80,[-2]]]]],16,4],[-1,[[15,[[84,[-2]]]]],16,4],[-1,[[15,[[81,[-2]]]]],16,4],[[[28,[-1]]],[],4],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[[[28,[-1]],-2],[[18,[13]]],4,19],[[[28,[-1]],[28,[-1]]],20,[21,4]],[[[82,[-1]],[82,[-1]]],20,[21,4]],[[[83,[-1]],[83,[-1]]],20,[21,4]],[[[80,[-1]],[80,[-1]]],20,[21,4]],[[[84,[-1]],[84,[-1]]],20,[21,4]],[[[81,[-1]],[81,[-1]]],20,[21,4]],[[[28,[-1]],[23,[22]]],[[24,[[23,[22]]]]],4],[[[28,[-1]]],14,4],[[[28,[-1]],25],26,[27,4]],[[[82,[-1]],25],26,[27,4]],[[[83,[-1]],25],26,[27,4]],[[[80,[-1]],25],26,[27,4]],[[[84,[-1]],25],26,[27,4]],[[[81,[-1]],25],26,[27,4]],[[[84,[-1]],[83,[-1]],23],[[15,[[84,[-1]],29]]],4],[[[81,[-1]],[80,[-1]]],[[81,[-1]]],4],[[[84,[-1]],[83,[-1]],23],[[15,[13,29]]],4],[[[81,[-1]],[80,[-1]]],13,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[28,[-1]],[80,[-1]]],[[81,[-1]]],4],[23,[[81,[-1]]],4],[[[28,[-1]],[83,[-1]]],[[84,[-1]]],4],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1]],[80,[-1]],[83,[-1]]],[[15,[13,29]]],4],[[[28,[-1]],[81,[-1]],[84,[-1]]],[[15,[13,29]]],4],0,[[[28,[-1]],33],[[15,[[83,[-1]],29]]],4],[[[28,[-1]],33],[[15,[[80,[-1]],29]]],4],[[[28,[-1]]],[[28,[-1]]],4],[[[84,[-1]],[28,[-1]]],[[84,[-1]]],4],[[14,14,14,14,-1],[[28,[-2]]],[85,86],4],[[[28,[-1]],-2],[[13,[[84,[-1]],[81,[-1]]]]],4,[85,86]],[[[28,[-1]],-2],15,4,30],[[[82,[-1]],-2],15,4,30],[[[83,[-1]],-2],15,4,30],[[[80,[-1]],-2],15,4,30],[[[84,[-1]],-2],15,4,30],[[[81,[-1]],-2],15,4,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[81,[-1]]],[[33,[22]]],4],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,14],[[33,[-1]]],87],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[89,[88]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[90,[-2,-3]]]]],16,4,[[91,[-2]]]],[[[92,[-1,-2]]],[],4,[[91,[-1]]]],[14,13],[14,13],[14,13],[[[90,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[93,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[92,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[33,[[28,[-2]]]],[23,[[81,[-2]]]],[23,[[84,[-2]]]]],[[15,[[90,[-2,-3]],29]]],[],4,[[91,[-2]]]],[[-1,[28,[-2]],[81,[-2]],[84,[-2]]],[[15,[[90,[-2,-3]],29]]],[],4,[[91,[-2]]]],[[[90,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[[92,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[61,[33,[[28,[-1]]]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[[61,[28,[-1]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[90,[-1,-2]],-3,[81,[-1]]],[[15,[13,29]]],4,[[91,[-1]]],[]],[[[90,[-1,-2]],-3,[23,[[81,[-1]]]]],[[15,[13,29]]],4,[[91,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[89,[88]]]],[[],[[89,[88]]]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[94,[-2,-3]]]]],16,4,[[91,[-2]]]],[[[95,[-1,-2]]],[],4,[[91,[-1]]]],[14,13],[14,13],[14,13],[[[96,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[95,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[94,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[28,[-2]],[81,[-2]],[84,[-2]]],[[15,[[94,[-2,-3]],29]]],[],4,[[91,[-2]]]],[[-1,[33,[[28,[-2]]]],[23,[[81,[-2]]]],[23,[[84,[-2]]]]],[[15,[[94,[-2,-3]],29]]],[],4,[[91,[-2]]]],[[[95,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[[94,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[61,[33,[[28,[-1]]]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[[61,[28,[-1]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[94,[-1,-2]],-3,[81,[-1]]],[[15,[13,29]]],4,[[91,[-1]]],[]],[[[94,[-1,-2]],-3,[23,[[81,[-1]]]]],[[15,[13,29]]],4,[[91,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[97,[-1]],[97,[-1]]],-2,98,[]],[[[97,[-1]],-1],13,98],[-1,-2,[],[]],[-1,-2,[],[]],[[[97,[-1]]],[[97,[-1]]],3],[[-1,-2],13,[],[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[97,[-2]]]]],16,99],[14,13],[[[97,[-1]],[97,[-1]]],20,21],[[[97,[-1]],[23,[-1]]],-1,98],[[[23,[-1]],[23,[-1]]],-1,98],[[[23,[-1]],[23,[-1]]],-1,98],[[[97,[-1]]],[[23,[-1]]],98],[[[97,[-1]],25],26,27],[-1,-1,[]],[[[97,[-1]]],14,98],[[[97,[-1]],14],-1,98],[[],14],[-1,-2,[],[]],[[[97,[-1]]],20,98],[[[97,[-1]]],14,98],[[[33,[-1]]],[[97,[-1]]],98],[[14,-1],[[97,[-2]]],[85,86],98],[[[97,[-1]],-2],15,100,30],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[89,[88]]]],[[[101,[-1]]],[[101,[-1]]],[3,4]],[[[102,[-1]]],[[102,[-1]]],[3,4]],[[[103,[-1,-2]]],[[103,[-1,-2]]],[3,4],[3,[91,[-1]]]],[[[104,[-1,-2]]],[[104,[-1,-2]]],[3,4],[3,[91,[-1]]]],[[[105,[-1,-2]]],[[105,[-1,-2]]],[3,4],[3,[91,[-1]]]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[101,[-2]]]]],16,4],[-1,[[15,[[102,[-2]]]]],16,4],[-1,[[15,[[105,[-2,-3]]]]],16,4,[[91,[-2]]]],[[[104,[-1,-2]]],[],4,[[91,[-1]]]],[14,13],[14,13],[14,13],[14,13],[14,13],[[[101,[-1]],25],26,[27,4]],[[[102,[-1]],25],26,[27,4]],[[[103,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[104,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[105,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-1]]],[[101,[-1]]],4],[[-1,[28,[-2]],[81,[-2]],[84,[-2]]],[[15,[[105,[-2,-3]],29]]],[],4,[[91,[-2]]]],[[[101,[-1]],-2],15,4,30],[[[102,[-1]],-2],15,4,30],[[[104,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[[105,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[61,[28,[-1]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[102,[-1]]],[[33,[22]]],4],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[105,[-1,-2]],-3,[81,[-1]]],[[15,[13,29]]],4,[[91,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[106,[-1,-2]]],[[106,[-1,-2]]],[3,4],[3,[91,[-1]]]],[[[107,[-1,-2]]],[[107,[-1,-2]]],[3,4],[3,[91,[-1]]]],[[[108,[-1,-2]]],[[108,[-1,-2]]],[3,4],[3,[91,[-1]]]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[108,[-2,-3]]]]],16,4,[[91,[-2]]]],[[[107,[-1,-2]]],[],4,[[91,[-1]]]],[14,13],[14,13],[14,13],[[[106,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[107,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[[[108,[-1,-2]],25],26,[27,4],[27,[91,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[28,[-2]],[81,[-2]],[84,[-2]]],[[15,[[108,[-2,-3]],29]]],[],4,[[91,[-2]]]],[[[107,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[[108,[-1,-2]],-3],15,4,[[91,[-1]]],30],[[61,[28,[-1]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[108,[-1,-2]],-3,[81,[-1]]],[[15,[13,29]]],4,[[91,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[109,14],[[[110,[-1]]],14,98],[[[111,[-1]]],14,98],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,14],[],109],[109,14],[[[110,[-1]]],14,98],[[[111,[-1]]],14,98],[[[112,[-1]]],[[113,[-1]]],6],[[[110,[-1]]],[[110,[-1]]],3],[[[111,[-1]]],[[111,[-1]]],3],[[[114,[-1]]],[[114,[-1]]],[6,3]],[[[115,[-1]]],[[115,[-1]]],[6,3]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[],[[110,[-1]]],77],[[],[[111,[-1]]],77],[14,-1,[]],[14,-1,[]],[14,-1,[]],[[[113,[-1]]],-2,4,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[115,[-2]]]]],16,6],[[[113,[-1]]],[],4],[[[112,[-1]]],[],6],[14,13],[14,13],[14,13],[14,13],[14,13],[14,13],[[[113,[-1]],[113,[-1]]],20,[21,4]],[[[114,[-1]],[114,[-1]]],20,[6,21]],0,[[[110,[-1]],25],26,27],[[[111,[-1]],25],26,27],[[[113,[-1]],25],26,[27,4]],[[[112,[-1]],25],26,[6,27]],[[[114,[-1]],25],26,[6,27]],[[[115,[-1]],25],26,[6,27]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[33,[[2,[-1]]]],[114,[-1]]],[[112,[-1]]],6],[[[33,[[2,[-1]]]],[114,[-1]]],[[112,[-1]]],6],[[[112,[-1]],14],-2,6,[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[[118,[],[[116,[-1]],[117,[-2]]]]],14,109,109],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[112,[-1]]],[[13,[[33,[[2,[-1]]]],[114,[-1]]]]],6],[33,[[113,[-1]]],4],[[[112,[-1]],-2,23,23],[[15,[[115,[-1]],119]]],6,[[118,[-1]]]],[[[118,[],[[116,[-1]],[117,[-2]]]]],14,109,109],[[[118,[],[[116,[-1]],[117,[-2]]]],14],-1,109,109],[[[115,[-1]],[112,[-1]],-2,-3],[[15,[13,119]]],6,109,109],[[[118,[],[[116,[-1]],[117,[-2]]]]],-2,109,109],[[[113,[-1]],-2],15,4,30],[[[112,[-1]],-2],15,6,30],[[[114,[-1]],-2],15,6,30],[[[115,[-1]],-2],15,6,30],[[-2,[31,[-1]],[31,[[11,[-1]]]]],[[112,[-1]]],6,[[118,[-1]]]],0,[[109,-2,[24,[[44,[-1]]]],[23,[[44,[-1]]]]],[[15,[[13,[[24,[[44,[-1]]]],[33,[[44,[-1]]]]]],35]]],98,[[40,[-1]]]],[[[110,[-1]],-2,[24,[[44,[-1]]]],[23,[[44,[-1]]]]],[[15,[[13,[[24,[[44,[-1]]]],[33,[[44,[-1]]]]]],35]]],98,[[40,[-1]]]],[[[111,[-1]],-2,[24,[[44,[-1]]]],[23,[[44,[-1]]]]],[[15,[[13,[[24,[[44,[-1]]]],[33,[[44,[-1]]]]]],35]]],98,[[40,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[115,[-1]],[112,[-1]],23,23],[[15,[[13,[33,33]],119]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[115,[-1]]],33,6],[[[115,[-1]]],33,6],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,13],[[119,119],20],[[119,25],26],[[119,25],26],[-1,-1,[]],[29,119],[[],14],[-1,-2,[],[]],[119,[[24,[36]]]],[-1,37,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[14,-1,[]],[-1,[[15,[[120,[-2,-3,-4]]]]],16,6,[[121,[-2]]],[[10,[[11,[-2]]]]]],[14,13],[14,13],[14,13],[[[122,[-1,-2,-3]],25],26,[6,27],[[121,[-1]],27],[[10,[[11,[-1]]]],27]],[[[123,[-1,-2,-3]],25],26,[6,27],[[121,[-1]],27],[[10,[[11,[-1]]]],27]],[[[120,[-1,-2,-3]],25],26,[6,27],[[121,[-1]],27],[[10,[[11,[-1]]]],27]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],14],[[],14],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[112,[-1]],[122,[-1,-2,-3]],[115,[-1]]],[[15,[[120,[-1,-2,-3]],119]]],6,[[121,[-1]]],[[10,[[11,[-1]]]]]],[[[120,[-1,-2,-3]],-4],15,6,[[121,[-1]]],[[10,[[11,[-1]]]]],30],[[[112,[-1]]],[[15,[[13,[[122,[-1,-2,-3]],[123,[-1,-2,-3]]]],119]]],6,[[121,[-1]]],[[10,[[11,[-1]]]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[120,[-1,-2,-3]],[112,[-1]],[123,[-1,-2,-3]],23,23],[[15,[[13,[33,33]],119]]],6,[[121,[-1]]],[[10,[[11,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[126,[],[[124,[-1]],[125,[-3]]]],-2],13,[[127,[-2],[[125,[-3]]]]],98,[27,77,3,21,128,129,100,99,130]],[[[127,[],[[131,[-1]],[125,[-4]]]],[44,[-2]]],13,[[126,[-2,-3],[[125,[-4]]]]],98,[],[27,77,3,21,128,129,100,99,130]],[[58,[23,[22]],-1],13,132],[133,13],0,0,[[58,[23,[22]]],13],0,[[[23,[22]]],134],[[],[[13,[-1,-1,135,135]]],[]],[[-1,14],[[126,[],[[124,[-2]],[125,[-1]]]]],[27,77,3,21,128,129,100,99,130],[[127,[-3],[[125,[-1]]]]],98],[[-1,14],[[127,[],[[131,[-2]],[125,[-1]]]]],[27,77,3,21,128,129,100,99,130],[[126,[-3,-4],[[125,[-1]]]]],98,[]],[[[23,[22]]],58],0,[[[126,[],[[124,[-1]],[125,[-3]]]],14],-4,[[127,[-2],[[125,[-3]]]]],98,[27,77,3,21,128,129,100,99,130],[]],[[[127,[],[[131,[-1]],[125,[-4]]]],-5,14],[[15,[[33,[42]],35]]],[[126,[-2,-3],[[125,[-4]]]]],98,[],[27,77,3,21,128,129,100,99,130],[[40,[-2]]]],[[58,[23,[22]]],[[15,[29]]]],[132,[[33,[22]]]],0,0,[1,14],[[[136,[-1]]],14,98],[-1,-2,[],[]],[-1,-2,[],[]],[[[136,[-1]]],[[136,[-1]]],3],[[-1,-2],13,[],[]],[[],[[136,[-1]]],77],[14,-1,[]],[14,-1,[]],[14,13],[[[136,[-1]],[136,[-1]]],20,21],[[[136,[-1]],25],26,27],[-1,-1,[]],[[],14],[-1,-2,[],[]],[[1,-2,[23,[[44,[-1]]]]],[[15,[[33,[[44,[-1]]]],35]]],98,[[40,[-1]]]],[[[136,[-1]],-2,[23,[[44,[-1]]]]],[[15,[[33,[[44,[-1]]]],35]]],98,[[40,[-1]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[-1,23],-2,[],[]],[[[138,[],[[137,[-1]]]]],-1,[3,27,21,139,128,129,132,100,99]],[-1,[[15,[[138,[],[[137,[-1]]]],29]]],[3,27,21,139,128,129,132,100,99]],[140,14],[[[23,[22]],14],-1,[]],[[[138,[],[[137,[-1]]]]],[[13,[20]]],[3,27,21,139,128,129,132,100,99]],0,0,0,0,[[-1,23,23],[[15,[-2,29]]],[],[]],[61,[[13,[-1,-2]]],[],[]],[[-1,23,-2],[[15,[13,29]]],[],[]],0,0,0,0,0,0,0,[[],[[89,[88]]]],[[],[[89,[88]]]],[[],[[89,[88]]]],[141],[[-1,[28,[-2]],[81,[-2]],[84,[-2]]],[[15,[[10,[],[[142,[-1]],[143,[-3]]]],29]]],[128,129],4,[128,129,100]],[[-1,[33,[[28,[-2]]]],[23,[[81,[-2]]]],[23,[[84,[-2]]]]],[[15,[[121,[],[[142,[-1]],[143,[-3]]]],29]]],[128,129],4,[128,129,[141,[-2]]]],[[61,[28,[-1]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[[61,[33,[[28,[-1]]]]],[[15,[[13,[-2,-3]],29]]],4,[],[]],[[[10,[],[[142,[-1]],[143,[-2]]]],-2,[81,[-3]]],[[15,[13,29]]],[128,129],[128,129,100],4],[[[121,[],[[142,[-1]],[143,[-2]]]],-2,[23,[[81,[-3]]]]],[[15,[13,29]]],[128,129],[128,129,[141,[-3]]],4]],"c":[],"p":[[10,"StepCircuit",1467],[5,"R1CSWithArity",0],[10,"Clone",1528],[10,"Engine",1423],[5,"PublicParams",0],[10,"CurveCycleEquipped",1423],[5,"ResourceBuffer",0],[5,"RecursiveSNARK",0],[5,"ProverKey",0],[10,"RelaxedR1CSSNARKTrait",1511],[8,"Dual",1423],[5,"VerifierKey",0],[1,"tuple"],[1,"usize"],[6,"Result",1529],[10,"Deserializer",1530],[5,"CompressedSNARK",0],[8,"Result",1531],[10,"Write",1532],[1,"bool"],[10,"PartialEq",1533],[1,"u8"],[1,"slice"],[6,"Option",1534],[5,"Formatter",1535],[8,"Result",1535],[10,"Debug",1535],[5,"R1CSShape",757],[6,"NovaError",161],[10,"Serializer",1536],[8,"CommitmentKeyHint",757],[5,"TypeId",1537],[5,"Vec",1538],[6,"PCSError",161],[6,"SynthesisError",1539],[10,"Error",1540],[5,"String",1541],[5,"AllocatedPoint",223],[10,"Group",1423],[10,"ConstraintSystem",1539],[5,"AllocatedPointNonInfinity",223],[5,"AllocatedBit",1542],[6,"Boolean",1542],[5,"AllocatedNum",1543],[5,"GrumpkinEngine",276],[5,"Bn256EngineIPA",276],[5,"Bn256EngineZM",276],[5,"Bn256EngineKZG",276],[5,"Secp256k1Engine",276],[5,"Secq256k1Engine",276],[5,"PallasEngine",276],[5,"VestaEngine",276],[5,"EvaluationArgument",424],[10,"Engine",1544],[5,"EvaluationEngine",424],[17,"GE"],[17,"Scalar"],[10,"TranscriptEngineTrait",1423],[10,"MultiMillerLoop",1544],[17,"CE"],[5,"Arc",1545],[5,"EvaluationEngine",467],[5,"InnerProductArgument",467],[5,"ProverKey",467],[5,"VerifierKey",467],[5,"UVKZGEvaluation",535],[5,"UVKZGProof",535],[5,"UVKZGPCS",535],[5,"ZMProverKey",535],[5,"ZMVerifierKey",535],[5,"ZMCommitment",535],[5,"ZMEvaluation",535],[5,"ZMProof",535],[5,"ZMPCS",535],[8,"UVKZGPoly",535],[10,"Borrow",1546],[10,"Default",1547],[5,"EvaluationArgument",716],[5,"EvaluationEngine",716],[5,"R1CSInstance",757],[5,"RelaxedR1CSInstance",757],[5,"R1CSResult",757],[5,"R1CSWitness",757],[5,"RelaxedR1CSWitness",757],[10,"RngCore",1548],[10,"CryptoRng",1548],[10,"Field",1549],[10,"Fn",1550],[5,"Box",1551],[5,"BatchedRelaxedR1CSSNARK",917],[10,"EvaluationEngineTrait",1504],[5,"VerifierKey",917],[5,"ProverKey",917],[5,"BatchedRelaxedR1CSSNARK",970],[5,"VerifierKey",970],[5,"ProverKey",970],[5,"MultilinearPolynomial",1025],[10,"PrimeField",1549],[10,"Deserialize",1530],[10,"Serialize",1536],[5,"R1CSShapeSparkRepr",1057],[5,"R1CSShapeSparkCommitment",1057],[5,"ProverKey",1057],[5,"VerifierKey",1057],[5,"RelaxedR1CSSNARK",1057],[5,"ProverKey",1156],[5,"VerifierKey",1156],[5,"RelaxedR1CSSNARK",1156],[10,"StepCircuit",1214],[5,"TrivialTestCircuit",1214],[5,"TrivialSecondaryCircuit",1214],[5,"PublicParams",1214],[5,"CircuitDigests",1214],[5,"AuxParams",1214],[5,"RecursiveSNARK",1214],[17,"C1"],[17,"C2"],[10,"NonUniformCircuit",1214],[6,"SuperNovaError",1354],[5,"CompressedSNARK",1376],[10,"BatchedRelaxedR1CSSNARKTrait",1511],[5,"ProverKey",1376],[5,"VerifierKey",1376],[17,"CircuitRO"],[17,"Constants"],[10,"ROTrait",1423],[10,"ROCircuitTrait",1423],[10,"Send",1552],[10,"Sync",1552],[10,"Abomonation",1553],[17,"NativeRO"],[10,"TranscriptReprTrait",1423],[10,"AbsorbInROTrait",1423],[10,"PrimeFieldExt",1423],[5,"BigInt",1554],[5,"TrivialCircuit",1467],[17,"CompressedCommitment"],[10,"CommitmentTrait",1491],[10,"Eq",1533],[10,"Len",1491],[10,"DigestHelperTrait",1511],[17,"ProverKey"],[17,"VerifierKey"],[10,"CommitmentEngineTrait",1491]],"b":[[199,"impl-Debug-for-NovaError"],[200,"impl-Display-for-NovaError"],[201,"impl-Display-for-PCSError"],[202,"impl-Debug-for-PCSError"],[203,"impl-From%3CPCSError%3E-for-NovaError"],[205,"impl-From%3CSynthesisError%3E-for-NovaError"],[950,"impl-BatchedRelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[951,"impl-RelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[954,"impl-BatchedRelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[955,"impl-RelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[965,"impl-RelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[966,"impl-BatchedRelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[979,"impl-RelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[980,"impl-BatchedRelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[1004,"impl-RelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[1005,"impl-BatchedRelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[1008,"impl-BatchedRelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[1009,"impl-RelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[1019,"impl-RelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[1020,"impl-BatchedRelaxedR1CSSNARKTrait%3CE%3E-for-BatchedRelaxedR1CSSNARK%3CE,+EE%3E"],[1364,"impl-Debug-for-SuperNovaError"],[1365,"impl-Display-for-SuperNovaError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
