# Install with `cargo install just`
# Usage: `just <bench|gpu-bench|gpu-bench-ci> <args>`
set dotenv-load
set dotenv-filename := "bench.env"
set ignore-comments := true

commit := `git rev-parse HEAD`

# Run CPU benchmarks
bench +benches:
  #!/bin/sh
  [ $(uname -m) = "x86_64" ] && FEATURES="asm" || FEATURES="default"

  for bench in {{benches}}; do
    cargo criterion --bench $bench --features $FEATURES
  done

# Run CUDA benchmarks on GPU
gpu-bench +benches:
  #!/bin/sh
  # The `compute`/`sm` number corresponds to the Nvidia GPU architecture
  # In this case, the self-hosted machine uses the Ampere architecture, but we want this to be configurable
  # See https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
  export CUDA_ARCH=$(nvidia-smi --query-gpu=compute_cap --format=csv,noheader | sed 's/\.//g')
  export EC_GPU_CUDA_NVCC_ARGS="--fatbin --gpu-architecture=sm_$CUDA_ARCH --generate-code=arch=compute_$CUDA_ARCH,code=sm_$CUDA_ARCH"
  export EC_GPU_FRAMEWORK="cuda"
  [ $(uname -m) = "x86_64" ] && FEATURES="cuda, asm" || FEATURES="cuda"

  for bench in {{benches}}; do
    cargo criterion --bench $bench --features "cuda"
  done

# Run CUDA benchmarks on GPU, tuned for CI on Linux x86_64
gpu-bench-ci +benches:
  #!/bin/sh
  printenv PATH
  [ $(uname -m) = "x86_64" ] && FEATURES="cuda, asm" || FEATURES="cuda"

  for bench in {{benches}}; do
    cargo criterion --bench $bench --features $FEATURES --message-format=json > "$bench-{{commit}}".json
  done

comparative-bench +benches:
  #!/bin/sh
  # Initialize FEATURES based on architecture
  [ $(uname -m) = "x86_64" ] && FEATURES="asm" || FEATURES=""
  # Append cuda to FEATURES if nvcc is found
  if which nvcc > /dev/null; then
    FEATURES="${FEATURES:+$FEATURES,}cuda"
  fi
  # add default if FEATURES is empty
  FEATURES="${FEATURES:-default}"

  for bench in {{benches}}; do
    cargo criterion --bench $bench --features $FEATURES --message-format=json > "$bench-{{commit}}".json
  done
